pragma solidity ^0.4.0;

contract BubbleCoin {
 
 mapping(address =>uint)  balances;
 uint supply;
 mapping(address=>mapping(address=>uint)) approved; 
 
 
 
    //erc 20 functions
    

    function totalSupply() constant returns (uint totalSupply){
    
    return supply;
    }
    
    function balanceOf(address _owner) constant returns (uint balance){
    
        
        return balances [ _owner];
    }
    
    function transfer (address _to, uint _value) returns(uint balance, bool succ){
     
     if(balances[msg.sender]>=_value  && _value >0)
     {
         balances[msg.sender]-=_value;
         balances[_to]+=_value;
        
     }
     else{
         return( balances[msg.sender],false);
       
        
        
    }
    
    }
    function approve(address _spender, uint _value )returns (bool success) {
        if(balances[msg.sender]> _value)
        {
            approved[msg.sender][_spender]= _value;
        return true;
            
        }
        else
         return false;
        
    }
    
    function allowance(address _owner, address _spender)constant returns (uint remaining){
        return approved[_owner][_spender];
       
        
        
    }
    
    function transferFrom(address _from, address _to, uint _value) returns (bool success){
        if(balances[_from]>=_value && _value>0)
    {
        balances[ _from] -= _value;
        balances[ _to] += _value;
    }
    else 
    {
        return false;
    }
        

    }
    

    function mint(uint numberOfCoins){
    balances[msg.sender] +=numberOfCoins;
    supply += numberOfCoins;
    
    }
    
    
    function getMyBalance() constant returns (uint getMyBalance){
        return balances[msg.sender];
    }

    
    
    
}
    
    



    
    
    
    
    
    
